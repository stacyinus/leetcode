Linkedin
Phone
!1. Two Sum Interface  LC 170
/*
think about tradeoffs:

if more add but less find, then use first method
if more find but less add, then use the second one to precalculate all the numbers

1,5,2,3,7   8

*/
public class TwoSum {
	Map<Integer, Integer> map = new HashMap<Integer, Integer> ();
	public void add(int num) {
		map.put(num, map.containsKey(num)? map.get(num) + 1 : 1);
	}
	public boolean find(int val) {
		for (Map.Entry<Integer, Integer> entry : map.entrySet()) {
			int ta = val - entry.key;
			if (map.containsKey(ta)) {
				if (ta != entry.key || entry.value > 1) return true;
			}
		}
		return false;
	}
}


!2. Shortest Word Distance II LC 244. 
Given a list of words and two words word1 and word2, return the shortest distance between these two words in the list.
For example,
Assume that words = ["practice", "makes", "perfect", "coding", "makes"].
Given word1 = “coding”, word2 = “practice”, return 3.
Given word1 = "makes", word2 = "coding", return 1.
Note:
You may assume that word1 does not equal to word2, and word1 and word2 are both in the list.

class SWD {
	Map<String, List<Integer>> map = new HashMap<String, List<Integer>> ();
	int index = 0;
	public void add(String s) {
		List<Integer> list = map.containsKey(s) ? map.get(s) : new ArrayList<Integer>();
		list.add(index++);
	} 
	public int search(String w1, String w2) {
		if (w1.equals(w2)) {
			List<Integer> list = map.get(w1);
			int min = Integer.MAX_VALUE;
			for (int i = 1; i <  list.length(); i++) {
				min = Math.min(Math.abs(list.get(i) - list.get(i - 1)), min);
			}
		}
		List<Integer> list1 = map.get(w1);//1,5,6
		List<Integer> list2 = map.get(w2);//0,4
		int i = 0 , j = 0, min = Integer.MAX_VALUE;
		while (i < list.size() && j < list2.size()) {
			min = Math.min(min, Math.abs(list1.get(i) - list2.get(j)));
			if (list1.get(i) < list2.get(j)) i++;
			else j++;
		}
		return min;
	}
}
a,b,c,a,d,a,a

public int search(List<String> list, String s1, String s2) {
	int i1 = -1, i2 = -1, min = Integer.MAX_VALUE;
	int count = 0;
	for (int i = 0; i < list.size(); i++ ) {
		if (s1.equals(s2)) {
			if (list.get(i).equals(s1)) {
				i1 = count % 2 == 0 ? i : i1;
				i2 = count % 2 == 0 ? i2 : i;
			}
		}
		else {
			i1 = list.get(i).equals(s1) ? i: i1;
			i2 = list.get(i).equals(s2) ? i: i2;
		}
		if (i1 != -1 && i2 != -1) {
			min = Math.min(min, Math.abs(i1 - i2));
		}
	}
	return min;
}

followup: two word distance 改成three word distance, 目的是让三个word相互之间的distance和最小???

1,3,6
2,8
10
public int search(List<String> list, String s1, String s2, String s3) {
	int i1 = -1, i2 = -1, i3 = -1, min = Integer.MAX_VALUE;
	for (int i = 0; i < list.size(); i++ ) {
		i1 = list.get(i).equals(s1) ? i: i1;
		i2 = list.get(i).equals(s2) ? i: i2;
		i3 = list.get(i).equals(s3) ? i :i3;
		if (i1 != -1 && i2 != -1 && i3 != -1) {
			min = Math.min(min, Math.abs(i1 - i2) + Math.abs(i3 - i2) + Math.abs(i1 - i3));
		}
	}
	return min;
}

!3. Maximun Subarray Sum
[-2,1,-3,4,-1,2,1,-5,4],
 -2,1,
public int maxSubArray(int[] nums) {
    int[] sums = new int[nums.length];
    sums[0] = nums[0];
    int max = nums[0];
    for (int i = 1 ; i < nums.length; i ++) {
        sums[i] = Math.max(nums[i], sums[i - 1] + nums[i]);
        max = Math.max(max, sums[i]);
    }
    return max;
}

4. Isomorphic String
/*
	abad
	cdcc
*/
    public boolean isIsomorphic(String s, String t) {
        Map<Character, Character> map = new HashMap<Character, Character>();
        for (int i = 0; i < s.length(); i ++) {
            if (map.containsKey(s.charAt(i))) {
                if (map.get(s.charAt(i)) == t.charAt(i)) continue;
                else return false;
            }
            if (map.values().contains(t.charAt(i))) return false;
            map.put(s.charAt(i), t.charAt(i));
        }
        return true;
    }

5. Maximum Product Subarray LC152
/*
	[2,3,-2,4,0], 2, -1
max  2 6 
min  2 3
*/
public class Solution {
    public int maxProduct(int[] nums) {
        int max = nums[0], min = nums[0], prod = nums[0];
        for (int i = 1; i < nums.length; i ++) {
            int tmpMax = Math.max(nums[i], Math.max(nums[i] * max, nums[i] * min));
            int tmpMin = Math.min(nums[i], Math.min(nums[i] * max, nums[i] * min));
        	prod = Math.max(tmpMax, prod);
        	max = tmpMax;
        	min = tmpMin;
        }
        return prod;
    }
}

6. Find the K closest points to the origin in a 2D plane, given an array containing N points.
/*
public class Point implements Comparable{
    public int x;
    public int y;
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
    @override
    public int compareTo(Point p) {
    	return this.x * this.x + this.y * this.y - p.x * p.x - p.y * p.y;
    }
}
*/
//Priority Queue
public List<Point> findKClosest(Point[] p, int k) {
	PriorityQueue<Point> pq = new PriorityQueue<Point>(new Comparator<Point> () {
		@override
		public int compare(Object o1, Object o2) {
			return o2.x * o2.x + o2.y * o2.y - o1.x * o1.x - o1.y * o1.y;
		}
	});
	//1,2,3,4,5
	for (int i = 0; i < p.length; i ++) {
		if (i < k) pq.offer(p[i]);
		else {
			Point max = pq.peek();
			if (max.compareTo(p[i]) > 0) {
				pq.poll();
				pq.offer(p[i]);
			}
		}
	}
	List<Point> list = new ArrayList<Point>();
	while (!pq.isEmpty()) {
		list.add(pq.poll);
	}
	return list;
}
// Quick Select
public List<Point> findKClosest(Point[] p, int k) {


}
public void partition(Point[] p, int k, int s, int e) {
	Point pivot = p[0];
	while (s < e) {
		while (s < e && p[e].compareTo(pivot) >= 0 ) {
			e--;
		}
		p[s] = p[e];
		while (s < e && p[s].compareTo(pivot) <= 0) {
			s++;
		}
		p[e] = p[s];
	}
	p[s] = pivot;
}

7.Valid Number LC65
面试官对限制条件说得并不是很清楚，就说你写吧。
跟他简单商量了一下，最后我只考虑了leading/trailing spaces和小数点，
指数的情况我问了，他说不用考虑了。没有LC上的难。
Valid Number (without '.' and with 'e')
/*
	consider only spaces and decimal point and sign
	valid: 1, 1.5, 1. ,  .5,  
	invalid : ., 1.., 1.56.2, 1.a2, a
	1. remove heading/trailing spaces.

	start : number :  -> number
						 decimal
						 end

			decimal -> number
						end (given the decimal point is not the start of the string)
			sign  should only at the beginning  -.5 => true, -. > false

*/
	public static boolean isValid (String s) {
		s = s.trim();
		if (s.length() == 0) return false;
		if (!validInput(s.charAt(0)) && s.charAt(0) != '+' && s.charAt(0) != '-') return false;
		if ((s.charAt(0) == '.' || s.charAt(0) == '-' || s.charAt(0) == '+') && s.length() == 1) return false;
		int count = s.charAt(0) == '.' ? 1 : 0;//count of decimal points appeared
		int count2 = s.charAt(0) >= '0' && s.charAt(0) <= '9' ? 1 : 0;//count of numbers appeared
		for (int i = 1; i < s.length(); i++) {
			char cur = s.charAt(i);
			if (!validInput(cur) || (cur == '.' && count > 0)) return false;
			if (cur == '.') count ++;
			else count2++;
			if (cur == '.' && i == s.length() - 1 && count2 == 0) return false;
		}
		return true;
	}	
	public static boolean validInput(char c) {
		if (c == '.' || (c >= '0' && c <= '9')) return true;
		return false;
	}
	/*
		consider number, decimal points, e,
		start -> number  - >  number 
							  decimal point
							  e
				 decimal points -> 
				 sign -->
	*/

	public boolean isNumber(String s) {
        s = s.trim();
        int i = 0;
        while (i < s.length()) {
            if (s.charAt(i) == 'e') break;
            i++;
        }
        if (i == 0 || i == s.length() - 1) return false;
        if (i == s.length()) return isValid(s);
        return isValid(s.substring(0, i)) && isValid(s.substring(i + 1, s.length()));
    }
8.Nested List Weight Sum I/II, LC 339/364.

Given a nested list of integers, return the sum of all integers in the list weighted by their depth.
Each element is either an integer, or a list -- whose elements may also be integers or other lists.
Example 1:
Given the list [[1,1],2,[1,1]], return 10. (four 1's at depth 2, one 2 at depth 1)
Example 2:
Given the list [1,[4,[6]]], return 27. (one 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4*2 + 6*3 = 27)
	1*1 + 4 *2 + 6 *3 =1+
/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public int depthSum(List<NestedInteger> nestedList) {
    	return depthSumHelper(nestedList, 1);
    }
    private int depthSumHelper(List<NestedInteger> nestedList, int depth) {
    	int sum = 0;
    	for (int i = 0; i < nestedList.size(); i++) {
    		NestedInteger cur = nestedList.get(i);
    		if (cur.isInteger()) {
    			sum += depth * cur.getInteger();
    		}
    		else {
    			sum += depthSumHelper(cur.getList(), depth + 1);
    		}
    	}
    	return sum;
    }
}

Given a nested list of integers, return the sum of all integers in the list weighted by their depth.
Each element is either an integer, or a list -- whose elements may also be integers or other lists.
Different from the previous question where weight is increasing from root to leaf, now the weight is defined from bottom up. i.e., the leaf level integers have weight 1, and the root level integers have the largest weight.
Example 1:
Given the list [[1,1],2,[1,1]], return 8. (four 1's at depth 1, one 2 at depth 2)

Example 2:
Given the list [1,[4,[6]]], return 17. (one 1 at depth 3, one 4 at depth 2, and one 6 at depth 1; 1*3 + 4*2 + 6*1 = 17) 
public class Solution {
	class ReturnValue {
		int depth;
		int sum; 
		public ReturnValue () {
			depth = 1;
			sum = 0;
		}
	}
    public int depthSum(List<NestedInteger> nestedList) {
    	return depthSumHelper(nestedList, 1).sum;
    }
    private ReturnValue depthSumHelper(List<NestedInteger> nestedList) {
    	int levelSum = 0;
    	ReturnValue rv = new ReturnValue();
    	for (int i = 0; i < nestedList.size(); i++) {
    		NestedInteger cur = nestedList.get(i);
    		if (cur.isInteger()) {
    			levelSum += cur.getInteger();
    		}
    		else {
    			ReturnValue tmp = depthSumHelper(cur.getList());
    			rv.sum += tmp.sum;
    			rv.depth = tmp.depth + 1;
    		}
    	}
    	rv.sum = rv.sum + levelSum * rv.depth;
    	return rv;
    }
}
 	
9. pow(a,b) LC50

public double pow(double x, int n) {
	double result = 1;
	double tmp = x;
	long i = (long) Math.abs((long)n);
	while (i > 0) {
		if ((i&1) == 1) {
			result += tmp;
		}
		i = i >> 1;
		tmp = tmp * tmp;
	}
	return n > 0 ? result : 1 / result;
}

10. Tree Level Traversal

第二题tree level traversal， follow up 是带间距的输出. 
/**
* Sample input:
*
*           1
*         /  \
*        3    5
*       /    / \
*      2    4   7
*     / \   \
*    9   6   8

*
* Expected output:
*    1
*    3 5
*    2 4 7
*    9 6 8

public void printTree(TreeNode root) {
	Queue<TreeNode> q = new LinkedList<TreeNode>();
	q.offer(root);
	while (!q.isEmpty()) {
		int size = q.size();
		for (int i = 0 ; i < size ; i ++) {
			TreeNode cur = q.pop();
			if (cur.left != null) q.offer(cur.left);
			if (cur.right != null) q.offer(cur.right);
			System.out.print(cur.val + " ");
		}
		System.out.println();
	}
}
follow up 1: 带间距的输出
*    ==========
* follow up expected output
*          1
*        3   5
*      2   64   7
*    9   6   8
	 0 1 2 3 4 5   
class Node {
	int col;
	TreeNode node;

	public Node (int c, TreeNode n) {
		col = c;
		n = node;
	}
}
public void printTree(TreeNode root) {
	if (root == null) return;
	int left = 0;
	TreeNode tmp = root;
	while (tmp != null) {
		tmp = tmp.left;
		left++;
	}
	Node newroot = new Node(left--, root);
	Queue<Node> q = new LinkedList<Node>();
	q.offer(newroot);
	while (!q.isEmpty()) {
		int size = q.size();
		int pre = 0;
		for (int i = 0 ; i < size ; i ++) {
			Node cur = q.pop();
			int col = cur.col;
			TreeNode n = cur.node;
			while (col + 1 > pre) {
				System.out.print("  ");
				col --;
			}
			if (n != null) {
				System.out.print(n.val + " ");
				q.offer( new Node(col - 1, n.left));
				q.offer( new Node(col + 1, n.right));
			}
			pre = col;
			System.out.print("  ");
		}
		System.out.println();
	}
}

follow up 是level order print 的zigzag 打印 就是alternative的left to right 和right to left的打印

11. Tournament tree 求 second minimum。就是胜者树找第二名的问题。
这题我先给了一个DFS O(n)的解法，不过小哥不满意，让再想想，但是想了大概5分钟还是不行。
然后我问小哥要提示，小哥说第二名只能被最后的冠军打败。
所以我就想到只需要考虑被root打败过的node就可以了，就想到了O(logn)的解法，写出来了。

public void findSecondBest() {
	
}

12. Implement a data structure that supports: add(), remove(), removeRand().

class MyDataStructure {
	List<Object> list;
	Map<Object, Integer> map;

	public MyDataStructure () {
		list = new ArrayList<Object>();
		map = new HashMap<Integer, Object>();
	}
	public void add(Object o) {
		if (map.containsKey(o)) return;
		list.add(o);
		map.put(o, list.size() - 1);
	}
	
	public void remove(Obejct o) {
		if (!map.containsKey(o)) return;
		int i = map.get(o);
		map.remove(o);
		list.set(i, list.get(list.size() - 1));
		list.remove(list.size() - 1);
		map.put(list.get(i), i);
	}

	public void removeRand() {
		Random r = new Random();
		int i = r.nextInt(list.size());
		Object o = list.get(i);
		remove(o);
	}
}

13. compute mean of n data from streaming in real time
class Mean {
	double mean;
	int n ;
	public Mean() {
		mean = 0;
		n = 0;
	}
	public double getMean(int x) {
		mean = ( mean * n + x ) / (n+1);
		n = n + 1;
		return mean;
	}

}

14. compute variance of n data from streaming in real time?????


15. Find the Influencer LC 277 (given a matrix and look for O(n) solution)
	/*
		Use graph: populate graph takes O(n2) time
		find out = 0, and in = n - 1
		class Vertex {
			int val;
			int in;
			int out;
			public Vertex(int v) {
				val = v;
			}
		}

	*/
	public int find(int n) {
		List<Vertex> list = new List<Vertex>();
		for (int i = 0; i < n; i ++) {
			Vertex cur = new Vertex(i);
			for (int j = 0; j < n; j ++) {
				if (i != j && knows(i,j)) {
					cur.out ++;
				}
				if (i != j && knows(j, i)) {
					cur.in ++;
				}
			}
			list.add(cur);
		}
		for (Vertex v : list) {
			if (v.in == n - 1 && v.out == 0) return v.val;
		}
		return -1;
	}

	/*
		use stack: Time O(n) , Space Complextiy O(n)
        1,2,3

	*/
	public int find(int n) {
		Stack<Integer> stack = new Stack<Integer>();
		for (int i = 0 ; i < n ; i ++) {
			stack.push(i);
		}
		while (stack.size() > 1) {
			int i = stack.pop();
			int j = stack.pop();
			if (knows(i, j)) stack.push(j);
			else stack.push(i);
		}
		int r = stack.pop();
		for (int i = 0; i < n ; i++) {
			if (r != i && (knows(r,i) || !knows(i, r))) return -1;
		}
		return r;
	}
	/*
		2 pointer solution: O(n)
	*/
	public int find(int n) {
		int i = 0 , j = n - 1;
		while (i < j) {
			if (knows(i,j)) i++;
			else j--;
		}
		for (int k = 0 ; k < n; k++) {
			if (k != i && (knows(i,k) || !knows(k, i))) return -1;
		}
		return i;
	}

16. binary tree (not BST)，给两个节点，求lowest common ancestor。与原题区别在于每个node有parent pointer
//if TreeNode doesn't have parent pointer
public TreeNode findLCA(TreeNode root, TreeNode n1, TreeNode n2) {
	if (root == null) return null;
	if (n1 == null) return n2;
	if (n2 == null) return n1;
	if (root == n1 || root == n2) return root;
	TreeNode left = findLCA(root.left, n1, n2);
	TreeNode right = findLCA(root.right, n1,n2);
	if (left != null && right != null) return root;
	if (left == null) return right;
	return left;
}
//if treenode have parent pointer: Time O(h), Space O(h)
public TreeNode findLCA(TreeNode n1, TreeNode n2) {
	Set<TreeNode> fathders = new HashSet<TreeNode> ();
	while (n1 != null) {
		fathers.add(n1);
		n1 = n1.father;
	}
	while (n2 != null) {
		if (fathers.contains(n2)) return n2;
		n2 = n2.father;
	}
	return null;
}

18. 版上常见的那个interval题目， 要实现一个接口，实现addInterval和getTotalCoverage两个函数。 基本算是leetcode的两个interval题目的变种， 第一遍bug free写了一个add O(n)和get O(1)的方法， 然后交流了一下之后做了些小优化。 followup是问有没有让add方法更efficient的写法, 然后我说了下add O(1), get O(nlogn)的方法， 然后又讨论了一些优化的问题。
--------------Merge Interval----------------------------
class Solution {
    public List<Interval> merge(List<Interval> intervals) {
    	List<Interval> result = new ArrayList<Interval>();
    	if (intervals == null || intervals.size() == 0) return result;
    	Collections.sort(intervals, new Comparator<Interval> () {
    		public int compare(Interval i1, Interval i2) {
    			if (i1.start == i2.start) {
    				return i1.end - i2.end;
    			}
    			return i1.start - i2.start;
    		}
    	});
    	Interval cur = intervals.get(0);
    	for (int i = 1; i < intervals.size(); i ++) {
    		Interval tmp = intervals.get(i);
    		if (tmp.start <= cur.end) { //need merge
    			cur.end = Math.max(cur.end, tmp.end);
    		}
    		else {
    			result.add(cur);
    			cur = tmp;
    		}
    	}
    	result.add(cur);
    	return result;
    }

}


----------------Insert Interval: insert, and merge----------------

/**
 * Definition for an interval.
 * public class Interval {
 *     int start;
 *     int end;
 *     Interval() { start = 0; end = 0; }
 *     Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public List<Interval> insert(List<Interval> intervals, Interval newInterval) {
        int index = findIndexToInsert(intervals, newInterval);//
        //System.out.println("Index is " + index);
        if (index == intervals.size()) intervals.add(newInterval);
        else intervals.add(index, newInterval);
        List<Interval> result = merge(intervals);
        return result;
    }
    public List<Interval> merge(List<Interval> intervals) {
    	if (intervals == null || intervals.size() < 2) return intervals;
        List<Interval> result = new ArrayList<Interval>();
        Interval cur = intervals.get(0);
        for (int i = 1 ; i < intervals.size(); i ++) {
        	Interval tmp = intervals.get(i);
        	if (cur.end < tmp.start) {
        		result.add(cur);
        		cur = tmp;
        	}
        	else if (cur.end < tmp.end){
        		cur.end = tmp.end;
        	}
        }
        result.add(cur);
        return result;
    }    
    private int findIndexToInsert(List<Interval> intervals, Interval newInterval) {
        if (intervals.size() == 0) return 0;
        int s = 0, e = intervals.size() - 1;
        Comparator<Interval> com = new MyComparator();
        while (s + 1 < e) {//find first greater than or equal to
            int m =  s + (e - s) / 2;
            Interval cur = intervals.get(m);
            if (com.compare(cur, newInterval) >= 0) e = m;
            if (com.compare(cur, newInterval) < 0) s = m;
        }
        if (com.compare(intervals.get(s),newInterval) >= 0) return s;
        if (com.compare(intervals.get(e),newInterval) >= 0) return e;
        return e + 1;
    }
    public class MyComparator implements Comparator<Interval> {
        @Override
        public int compare(Interval i1, Interval i2) {
            if (i1.start == i2.start) {
                return i2.end - i1.end;
            }
            return i1.start - i2.start;
        }
    }
}

-------------------Data Stream as Disjoint Intervals-------------------------

class solution {
	List<Interval> list;
	void addInterval(Interval in);

}


19. sqrt LC 69
public class Solution {
    public int mySqrt(int x) {
        
    }
}


class 
onsite：


1. Input: Billions of training examples in a file. Each example has one of 4 class labels
Output: Select Mc random samples from each class c={1, ..., 4}
简单版本： Get M Samples from a stream。相当于只有一个class

2. derive cost function for logistic regression; ask other questions related to machine learning(e.g., regularization, overfitting, CTR).


Coding 1
Implement hash table. Follow up is multi-threading. Waral 鍗氬鏈夋洿澶氭枃绔�,
Coding 2
Convert multi-level list to a single list. 地里有类似的题，就是节点有up, down, left, right指针，然后变成一个链表，只用left/right pointer。这题不难，但有些corner case 要注意
Design
Shop top 500 exception for a datacenter

其他还有 technical communication and host manager, 没什么好说的。
总的来说，L家的题目不难，但自己multi-threading不熟，写code纠结了很长时间。 HR的反馈也是这轮有问题。




Coding 1insert interval
一个描述非常复杂的dfs, parse string， 很简单. 涓€浜�-涓夊垎-鍦帮紝鐙鍙戝竷
鏉ユ簮涓€浜�.涓夊垎鍦拌鍧�. 
Coding 2. visit 1point3acres.com for more.
remove/add/getRandom O(1)
用这个解法做的, feedback 是这个不是O(1), 面试官没听明白.鏈枃鍘熷垱鑷�1point3acres璁哄潧
https://discuss.leetcode.com/top ... -follow-up-131-ms/2
多维矩阵求和
.1point3acres缃�
Design 
设计一个找系统里面所有符合要求文件的function, 要求能不停的添加新的条件
type linkedin.com url 后发生什么, 这轮说概念上有些confusion




1. 一个小哥模拟自己是新人，要我带他做一个项目。也就是讲一个我做过的项目，基本就是不断讲解，再回答他的提问。
2. 讲一个自己做过的项目。肯定不能重复。于是说了一个在学校时做的小组Hadoop项目，作为team leader为团队和项目做了什么贡献。面试官好像更在意技术以外的，问了很多和组员沟通的细节。后面问了些HR问题“为啥来这疙瘩？”。
午饭（最近他们要搬到新楼了，很兴奋。陪饭小哥说不用担心，随便聊。就谈了下体育兴趣，还有科技见闻。）
3.罗马字转数字，数字转罗马。先给出我个人最喜欢的写法。考官不喜欢，非要用他的，纠结了一下。. 鍥磋鎴戜滑@1point 3 acres
4.四向链表（上下左右）转双向链表（左右）。输入是一头一尾。放平链表后（中间可以乱序序），保证头尾元素还是所给的指针。
先说了BFS的想法。然后要求用O（1）做空间。就是不管一切的放平了。然后把头尾挑出来，放到列首和列尾。. 1point 3acres 璁哄潧
5.设计短网址服务器构架。讨论流量，服务器架构和数据库架构。纯设计，半点代码都不碰。各种挑战。
鏉ユ簮涓€浜�.涓夊垎鍦拌鍧�. 
之前HR说一共六轮其实包括了午饭，其实只有五轮。


领英的onsite的时候，会收到一个小礼物，是自己Linkedin的联系人图谱，挺不错的。
L家的onsite有如下几轮
2x 写程序. visit 1point3acres.com for more.
1x 技术交流
1x 设计
1x 东家介绍
一般都是每轮两个面试官

技术轮 1： 
第一题, 罗马数字和拉丁数字的互相转换，花了不少时间在讨论规则上。
记不清第二题了

技术轮 2：
第一题，multi-sum count: 输入一个数组，和一个目标数字，求有多少种方式能够用数组里面的数字求和得到目标数字
第二题，leaf print tree: 给一个树，每一轮把所有的叶子输出出来，并且假象拿掉，然后再次输出，再次假象拿掉叶节点，直到全树输出完成为止。要求不能改变树本身

技术交流： 
这一轮是L家的特色轮了。是要求求职者以组里老人的身份，给两个以组里新人角色出现的面试官讲要一个自己做过的项目，要求是讲完后两个“新人”可以对项目有足够的了解，一个上手干活了。
这一轮对于之前在公司要已经带过新人的求职者要应该属于没有太多难度了。不过要注意把自己项目细节和黑话略去，以方便“新人”学习和理解
. 鐣欏鐢宠璁哄潧-涓€浜╀笁鍒嗗湴
设计轮：
tiny url：这个题目的面经很多了，就不多说了

东家介绍：
这一轮是L家的中层头头来介绍自己的部门，同时也问各种behavior问题。




coding:insert a node in binart search treefind influencer
print binary tree level by level
merge n sorted lists
permutation 


design:
tinyURL. 1point3acres.com/bbs

其他的都是communication，讲讲project之类的

普通的5轮+lunch
两轮coding（都是题库题，但是会问各种细节，边界条件，为什么这么做，最后还跑了test case）：
1LCA（和lc不太一样，是那种自己带父节点指针的那种）. 鍥磋鎴戜滑@1point 3 acres
2重复dna
3求平方根
4数据流中返回最大的k个数.1point3acres缃�
系统设计：
设计日历（不用考虑重复事件，用户少）
tech communication，hiring manager和lunch全程聊天+behavior

onsite:
1. 以色大叔，全程黑脸
paint house 1&2
word ladder
2. 聊天 天竺经理
3. 吃饭 白人经理
4. desig设计过去5min 1hr 24hr各类系统的exception
5. 算法 insert interval and get_length， de/seriliaze binary tree
6. 介绍自己工作

最后挂在design，也不知道错在哪，都准备过，题库痕迹明显



补充内容 (2016-9-25 05:37):
design 题目这里有讨论. From 1point 3acres bbs
http://www.mitbbs.com/article_t/JobHunting/33226795.html	



onsite：
SF的office今年三月份才开始使用，整个building都是他们的。面试是在一个小房间里，十六层，view特别好，视野开阔，有海有桥的。白板上写着"Welcome In XXX"，还有小礼物，挺用心的。
-google 1point3acres
先跟HR见了个面，说了说今天的安排，畅想了一下美好的未来，说是面完了2到5天就有结果啊，offer等着你啊，公司benefits好啊，你要放松啊，你要加油啊。。。

Coding 1
(1) 从一个数组里找出能够组成三角形的三个数。没见过。
当时脑子一时短路，一组数据也没试，给出了一种方法，其实是错的。有可能是当时我没说清楚，面试官说应该没问题，写完后他说貌似不对啊。。。我换了一种方法，two pointers，复杂度是O(n^2)。他说你再想想吧，有O(n)的，要是想不出来你就先写这个吧。想了半天想出来了，结果时间不够了，他说别写了，知道我懂了。
方法貌似不是很难。比如 1 2 3 3，1 + 2 == 3 <= 3, 这种情况下1就可以不考虑了，用到了不等式的性质。即使 1 3 3 是一个结果，2 3 3 也是一个结果，1 + 3 < 2 + 3，所以1就不用考虑了。

(2) LC 200, Number of Islands
原题。说了思路，算是常规吧，扫描，看到1加1，然后用dfs去flip。面试官一开始貌似没理解，试了几个例子，觉得没问题让我写了。

Coding 2
LC 265, Paint House II
这道题当天早上看面经看到了，心中窃喜。在Discuss里看到了大神给出的最优解，O(nk)，constant space。我就把这种方法说了，结果悲剧了。有可能是我说不清楚，面试官一直没理解，我又举例子又画图的，将近半小时后面试官恍然大悟，让我写了。五分钟写完代码，在接下来的讨论中，我发现面试官其实还是没理解，我的哥。。。接下来先让我跑了个他的test，过了，他不服，当场想例子要challenge大神的最优解，结果可想而知啊。最后他应该是懂了，说了个“酷”。一个小时就这么过去了，只写了一道题。说实话啊，这个方法虽说比较巧妙，但还不至于辣么巧妙啊，我那天早上看的，看了看大神简短的解释和整洁的代码，二十分钟也就搞定了，不知道咋回事儿。

我觉得大家面算法的时候一定要跟面试官解释清楚，确定面试官理解了再写，否则时间就白白浪费了。解释dp的时候还是先从比较直接的方法开始比较好，如果有需要再慢慢优化，一上来就给最优解有时确实不太好理解。

午餐. 1point3acres.com/bbs
这个必须要提一下。一个中国小哥带我吃的，人特别好，给我推荐了好吃的饭菜和甜点。LinkedIn的食堂确实好啊，中餐的味道很不错。吃饭的时候小哥说了LinkedIn的很多好，能看出来在那工作还是很开心的，谈话的内容也为下午和manage聊提供了很多素材，赞一个。

Manager
人很nice，比较好聊，问了些常规的问题，比如你在上一份工作里有没有得到什么mentorship啊，我也根据中午的聊天内容问了些问题。我看他一直在那写，你问的问题他也会做记录，不知道用来干啥。
问了一道小设计题。大家知道有些工作在LinkedIn上能直接申请，点那个“Apply”按钮。问题是如果让你设计你会考虑那些问题。他就说你尽量想吧，想不出来告诉他一声。我就想到三个。考虑多少人会用，从而知道QPS。因为要把用户的信息发给第三方网站，感觉要考虑隐私。有的工作需要cover letter有的不需要，感觉需要考虑data format。他接着又问需要返回什么error。我也只想到了三个。我说有的job过期了，需要返回error。第三方网站挂了需要返回一下。各种network connection，比如前后端连接，service和db之间的连接。前两个他说行，第三个他就说还好。说实话不太知道他想问啥。。。

Technical Communication
讲了个project。小哥挺活泼的，简单问了问。有几个问题自己以前没仔细考虑过。最大的难点？在test过程中哪部分最容易出错？如果重来，你会对哪部分做修改？大家有时间可以考虑一下啊。.鐣欏璁哄潧-涓€浜�-涓夊垎鍦�

System Design
LinkedIn有个share功能，在里面会出现一些URL，问题是找出在过去一天，一小时，五分钟被share的top 5/10/...多的URL。-google 1point3acres

以前没面过这种，有点儿没底，还好面试官很nice，会给提示。

算是两部分吧。当用户分享的时候，这里有一个client-server。当用户query top 5/10/...多的URL的时候，这里还有一个client-server。

先说第一部分。一开始说我们有10M users，我上过XX算法的系统设计，按照里面的方法，先算了QPS，面试官用自己的电脑给算的，大概150。没等我开口，面试官说要考虑Peak QPS哦，我说那就3X吧，450，他表示同意。我一看不是很高，感觉DB有很多选择，就先试试MySQL吧，还能跟面试官讨论一下。结果面试官说不用把这些数据存起来，第二天就不用了。感觉这是在给我提示。我说那就用in-memory key-value store吧，memcached，key是URL，value是count。说实话我不是很懂这些NoSQL的工具，没上手用过，这样瞎扯真是没底。DB算是先选好了。我接着说加个"URL Extractor"service吧，用户把请求发过来，这个service把URL找出来然后存到数据库里。他问如果想让用户得到快速的响应应该咋办。这里我也不太懂，他说你加个message queue，Kafka那种，类似producer-consumer。这个我是真不知道。然后就是如何把统计数据加起来了，这里也有点儿不太会。我的疑问是咋判断URL在过去的五分钟里出现过呢？他说你可以用好几个db。一开始真的没懂。他看我没懂，说第一个db存0~5min的，第二个db存6~10min的，等等，还有存过去一个小时的，一天的。我一开始还是没懂，比如说我想要3min~8min的咋办？一开始我没问，想了一会儿才问，他说不用太real time，忘跟你说了，不好意思。他说其实要做到3min~8min也行，你有60个db就好了，到时候一加就行了。

接下来就是咋找出来top5/10/...的URL了，窃以为要用heap啥的呢，面试官说memcached功能不太行啊，对value部分没啥操作啊，你换个别的吧。我一想那就Redis吧，听说那个比较厉害，有一些set操作啥的，直接找出top多的URL。面试官表示一拍即合，Redis应该是不错的选择。我说再加个service吧，用于处理这些请求。他说怎么处理这些请求呢？是直接从数据库里读数据还是咋办？我一想这是read-only啊，加个cache吧，另一个deamon定时去读数据库做计算，然后把算好的数据写到cache里，用户直接读cache就行了，反正也不用太real time。他表示同意，然后时间就到了。
. 1point3acres.com/bbs
我只能给出这么多了，只想出了working solution，都没问啥scale方面的，希望大神能做个补充，让我开阔一下眼界。.1point3acres缃�

写得不是很好，大家凑和看看吧，主要是想给没面过system design的小伙伴们找找感觉。我在网上没找到比较具体的，所以准备的时候比较忐忑，只看到题目“LinkedIn有个share功能，在里面会出现一些URL，问题是找出在过去一天，一小时，五分钟被share的top 5/10/...多的URL。”表示很懵逼。我的这个面试官会一直给出提示，还挺好的。
. visit 1point3acres.com for more.
周一接到电话说是跪了，feedback也没有，说是有更强的选手呢。 鏉ユ簮涓€浜�.涓夊垎鍦拌鍧�. 

感觉LinkedIn是有题库的，面试题基本在面经里都出现过。.1point3acres缃�
希望能够帮到大家。也希望自己在接下来的面试里能够好好表现，早日找到工作。. 鐗涗汉浜戦泦,涓€浜╀笁鍒嗗湴


补充内容 (2016-10-10 11:13):.1point3acres缃�
三角形那道题，输入不是排好序的，面试官的意思是排好序后O(n)啊，大家联系语境感受一下吧，就那个意思啊。谢谢楼下指出。


电话面试过了之后下一周就onsite
. Waral 鍗氬鏈夋洿澶氭枃绔�,
1. coding，二叉树里lowest common ancestry，leetcode原题. visit 1point3acres.com for more.
2. behavior, 天竺经理，问怎么设计linkedin referral系统
3. design, 天竺码农，怎么设计cold start recommendation system，怎么设计video recommendation system
4. design，怎么设计ads CTR prediction系统，以及模型的实现
5. coding，给定users，movies和rating，怎么预测某个用户对某个电影的评分。collaborative filtering.



一轮是一个刚工作几个月的加拿大小哥，问了skiplist。以前大概知道这个东西但是从来没了解过其implementatiion。先写了个查找的API，还比较好写，然后让写插入，于是就跪了。一直想着每一层insert node之后就把上下左右都连好，但这样写着很复杂。最后没写出来，好像应该每一层插入新node时只连左右，然后用个stack存新node，最后再把stack里的node上下连起来。. 鐗涗汉浜戦泦,涓€浜╀笁鍒嗗湴

第二轮是两个人假设是你们组新来的，你给他们讲一个项目，要求讲完之后他们足够熟悉能够开始做这个项目相关的工作。

第三轮是LC 265 149
. 涓€浜�-涓夊垎-鍦帮紝鐙鍙戝竷
第四轮印度女Manager聊天，感觉这轮应该最重要但是没有发挥好。

最后一轮设计hangman，见其他面筋. 鍥磋鎴戜滑@1point 3 acres

感觉L家遇到的几个国人精神面貌都不怎么好，萎靡不振的样子，两个小印反而神采奕奕比较热情。


onsite
1 needle and hay, bruteforce or kmp isomorphic strings
2 tiny url-google 1point3acres
3 max points on a line, 问了保存double精度等问题
求加大米，下周就面fb了，感觉题目都好难～-


LC53 －Maximum Subarray

Follow up:Maximum Product Subarray








1. Host manager. 像是中东人，但本科是UIUC读的，很年轻，刚升经理没几个月。behavior问题加一些小的设计问题，大概就是给你一个任务，你从哪些方面着手之类的。
. From 1point 3acres bbs
2.      2. Coding, 小韩和老中.
1) Same Tree; 2) Word Ladder II (Only needto return one shortest path)见到这道题我就觉得基本可以结束今天的面试了。根本没看这道题，心想面到这道题，我就认栽。按照word ladder I 的写法往外扩展，写的很乱。写完第一道题的时候，被小韩BS了一下，问我不是学CS的为什么要找码工的工作。

3.       3. Lunch. 小美。瞎扯。
4.      
4.4. 4. System Design. 国人大哥+小美.
In shared articles, some URLs maybecontained. Design a system that can return top shared URLs in past 5 minutes, 1hour and 1 day. Suppose the article sharing service and URL extracting functionsare already there. 当时就觉的他们不喜欢我的设计，国人大哥坐在椅子上都快成葛优躺的姿势了。
5.      
5. C5.Coding. 小中和小印.
小中说给我一道"VERY simple problem", 其实也是道面经题，看到但没有想过怎么做，所以做的不好。设计一个数据结构使得 add(T t), remove(T t), removeRandom() 都是O(1). 第二题，LC原题。二叉树求lowest common ancestor.
.1point3acres缃�
6.       6. Technical communication. 国人大哥+烙印。讲自己做过的一个项目。
LinkedIn 明显感觉不像是在招人。面试官都是资料较浅的，懂的东西也不是很多的样子，有些还挺拽的。两天后悲剧。


Linkedin onsite interview MTV-google 1point3acres
1. code questions: given a stream of integer, randomly choose k elements from n, ensure each value among k has equal probability.  Given a mutlidenmentional arrays, compute the sum of all values. Given API getValue(dn, dn-1.... d0) dn = index at denmention

2. technique communcation, describe favorite project
3. code problems: serialize and deserialize a BST 
4. host manager session: describe the most chanllenging project and how you handle challenges, why choose Linkedin over other companies
5. system design: design a system to monitors the top exceptions during last hour, last 24 hours. 1point 3acres 璁哄潧





System Design Summary 
http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=175538&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3046%5D%5Bvalue%5D%3D6%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311