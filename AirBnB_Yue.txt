1. LeetCode: stack/Maximal Rectangle-O https://leetcode.com/problems/maximal-rectangle/
/*
Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

For example, given the following matrix:

1 0 1 0 0   1 0 1 0 0
1 0 1 1 1	2 0 2 1 1  
1 1 1 1 1	3 1 3 2 2  0,
1 0 0 1 0	4 0 0 3 0
Return 6.

*/
public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return 0;
        int[][] t = new int[matrix.length][matrix[0].length];
        int max = 0;
        for (int i = 0 ; i < matrix.length; i ++) {
        	for (int j = 0; j < matrix[i].length; j++) {
        		if (i == 0 ) {
        			t[i][j] = matrix[i][j] == '1' ? 1 : 0;
        		}
        		else {
        			t[i][j] = matrix[i][j] == '1' ? t[i - 1][j] + 1 : 0;
        		}
        		max = Math.max(max, t[i][j]);
        		System.out.print(t[i][j]);
        	}
        	Stack<Integer> stack = new Stack<Integer>();
        	for (int j = 0; j <= matrix[i].length; j++) {
        		while (!stack.isEmpty() && (j == matrix[i].length || t[i][stack.peek()] >= t[i][j])) {
        			int height = t[i][stack.pop()];
        			int width = stack.isEmpty() ? j : j - stack.peek() - 1;
        			int area = height * width;
        			//System.out.print("height = " + height + " width = " + width + " area = " + area);
        			max = Math.max(max, area);
        		}
        		stack.push(j);
        	}   
            System.out.println();
        }
        return max;	
    }

}