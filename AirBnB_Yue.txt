Phone:

1. There's a menu, items are listed with prices of a double. If you are given n dollars,  return all the combos that can be sumed to n.
	Similar Questions :https://leetcode.com/problems/combination-sum/ 
				 	   https://leetcode.com/problems/combination-sum-ii/ 	
	If the price is in dollars(18.35), you can change it to cents(1835) first and then use the below function to solve. 
	Ask: 	Can you order the same thing many times?  
		 	Are there any items with the same prices? 
[1], 1
[2,3,4,5,8] sum=12 
[1,1,2,2]
//use integer
public class Solution {
	public List<List<Integer>> combinationSum(int[] prices, int sum) {
		List<List<Integer>> result = new ArrayList<List<Integer>>();
		Arrays.sort(prices);
		helper(prices, sum, result, new ArrayList<Integer>(), 0);
		return result;        
    }
	private void helper(int[] prices, int sum, List<List<Integer>> result, List<Integer> list, int k) {
		if (sum < 0) return;
		if (sum == 0) {
			result.add(new ArrayList<Integer>(list));
			return;
		}
		for (int i = k; i < prices.length; i ++) {
			if (i > k && prices[i] == prices[i - 1]) continue;//if there are no dup in prices, no need to add this line.
			list.add(prices[i]);
			helper(prices, sum - prices[i], result, list, i);// if the same item can't be ordered 2 times, start from i + 1
			list.remove(list.size() - 1);
		}
	}  
}

public class Solution {
    public 
}


2. Parlindrome Pairs https://leetcode.com/problems/palindrome-pairs/
	http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=203949&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3046%5D%5Bvalue%5D%3D37%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

["abcd", "dcba", "dcbaee","eedcba","","a","aaa"]
abcd, dcba
ab ddba
ab back
eedcba(i th), if s1 is palindrome, then check if the reverse of s2 exists in the list , if so, j + i
			  if s2 is palindrome,  check if reverse of s1 exists in the list, i + j
abcd
"",abcd j, i
abcd,"" i, j

bcda
["", a]
a
s1 = ""
s2 = "a"
public class Solution {
    public List<List<Integer>> palindromePairs(String[] words) {
    	List<List<Integer>> result = new ArrayList<List<Integer>>();
    	Map<String, Integer> map = new HashMap<String, Integer>();
    	for (int i = 0 ; i < words.length; i ++) {
    		map.put(words[i], i);
    	}
    	for (int i = 0; i < words.length; i ++) {
    		for (int j = 0 ; j <= words[i].length(); j ++) {
    			String s1 = words[i].substring(0,j);//""
    			String s2 = words[i].substring(j);
    			if (isPalindrome(s1)) {
    				String reverseS2 = (new StringBuilder(s2)).reverse().toString(); 
    				if (map.containsKey(reverseS2) && map.get(reverseS2) != i) {
    					result.add(Arrays.asList(map.get(reverseS2), i));
    				}
    			}
    			if (s2.length() > 0 && isPalindrome(s2)) {
    				String reverseS1 = (new StringBuilder(s1)).reverse().toString(); 
    				if (map.containsKey(reverseS1) && map.get(reverseS1) != i) {
    					result.add(Arrays.asList(i, map.get(reverseS1)));
    				}
    			}
    		}
    	}
    	return result;
    }
    private boolean isPalindrome(String s) {
    	int i = 0, j = s.length() - 1;
    	while (i < j) {
    		if (s.charAt(i) != s.charAt(j)) return false;
    		i++;
    		j--;
    	}
    	return true;
    }
}	


3.Page display
实现分页显示。给了以下一些输入数据，要求将以下行分页显示，每页12行，其中每行已经按score排好序，分页显示的时候如果有相同host id的行，则将后面同host id的行移到下一页。

    public static void main(String[] args) {
        String[] strs = new String[]{
          "1,28,300.1,SanFrancisco",
          "4,5,209.1,SanFrancisco",
          "20,7,208.1,SanFrancisco",
          "23,8,207.1,SanFrancisco",
          "16,10,206.1,Oakland",
          "1,16,205.1,SanFrancisco",
          "6,29,204.1,SanFrancisco",
          "7,20,203.1,SanFrancisco",
          "8,21,202.1,SanFrancisco",
          "2,18,201.1,SanFrancisco",
          "2,30,200.1,SanFrancisco",
          "15,27,109.1,Oakland",
          "10,13,108.1,Oakland",
          "11,26,107.1,Oakland",
          "12,9,106.1,Oakland",
          "13,1,105.1,Oakland",
          "22,17,104.1,Oakland",
          "1,2,103.1,Oakland",
          "28,24,102.1,Oakland",
          "18,14,11.1,SanJose",
          "6,25,10.1,Oakland",
          "19,15,9.1,SanJose",
          "3,19,8.1,SanJose",
          "3,11,7.1,Oakland",
          "27,12,6.1,Oakland",
          "1,3,5.1,Oakland",
          "25,4,4.1,SanJose",
          "5,6,3.1,SanJose",
          "29,22,2.1,SanJose",
          "30,23,1.1,SanJose"
        };
        List<List<String>> pages = getPages(strs, 12);
        int i = 1;
        for (List<String> page: pages) {
            System.out.println("Page " + i++);
            System.out.println(Arrays.toString(page.toArray()));
        }
        
      }
    
    public static List<List<String>> getPages(String[] input, int k) {
        List<List<String>> result = new ArrayList<List<String>>();
        List<Map<String, List<String>>> pages = new LinkedList<Map<String, List<String>>>();
        for (String line : input) {
            String[] s = line.split(",");
            //for each line, try to insert from the first page
            for (Map<String, List<String>> map : pages) {
                // once inserted, break and move to next line
                if (!map.keySet().contains(s[0])) {
                    map.put(s[0],  new ArrayList<String>(Arrays.asList(s)));
                    // if the page is full, remove this page and add to result
                    if (map.size() == k) {
                        Map<String, List<String>> cur = ((LinkedList<Map<String, List<String>>>) pages).poll();
                        List<String> resultPage = new ArrayList<String>();
                        for (List<String> list : cur.values()) {
                            resultPage.addAll(list);
                        }
                        result.add(resultPage);
                    }
                    break;
                }
            }
            //if not inserted to any pages, make a new page
            Map<String, List<String>> newPage = new LinkedHashMap<String, List<String>>();
            newPage.put(s[0],  new ArrayList<String>(Arrays.asList(s)));
            pages.add(newPage);
        }
        return result;
    }

4. ArrayList/锯齿数组的iterator 删除-O 给一个2d array,要求写一个顺序访问这个2d array的Iterator,包括hasNext()与next()。注意2d array的每行中元素的个数可能不一样,也可能为空。followup是写一个 remove(),注意是remove当前item,不是下一个item。remove是需要同时删除原来数组里元素,也能在Iterator调用时体现出来。

ask: 1. after remove, the list became empty, shall we remove that list? (In my solution I assume no, 
        because the question allow empty list to be in the input) 

public class My2DArray<T> implements Iterable<T> {
    
    public static void main(String[] args) {
        My2DArray<Integer> array = new My2DArray<Integer>(); 
        array.addLine(new ArrayList<Integer>());
        array.addLine(new ArrayList<Integer>(Arrays.asList(1,2,3,4,5)));
        array.addLine(new ArrayList<Integer>(Arrays.asList(6,7)));
        array.addLine(new ArrayList<Integer>());
        array.addLine(new ArrayList<Integer>(Arrays.asList(8,9,10,11,12)));
        array.addLine(new ArrayList<Integer>(Arrays.asList(13)));
        Iterator<Integer> it = array.iterator();
        if (it.hasNext()) {
            System.out.println(it.next());//1
            System.out.println(it.next());//2
            System.out.println(it.next());//3
            System.out.println(it.next());//4
            it.remove();//remove 4
            it.remove();//remove 3
            it.remove();//remove 2
            System.out.println(it.next());//5
            System.out.println(it.next());//6
            System.out.println(it.next());//7
            it.remove();//remove 7
            it.remove();//remove 6
            it.remove();//remove 5
            System.out.println(it.next());//8
            System.out.println(it.next());
        }
        System.out.println("Iterate Again");
        it = array.iterator();
        while (it.hasNext()) {
            System.out.println(it.next());
        }

    }
    List<List<T>> list;

    public My2DArray() {
        list = new ArrayList<List<T>>();
    }

    public void addLine(List<T> line) {
        list.add(line);
    }

    @Override
    public Iterator<T> iterator() {
        return new My2DArrayIterator<T>();
    }

    @SuppressWarnings("hiding")
    private class My2DArrayIterator<T> implements Iterator<T> {
        int nextRow;
        int nextCol;
        int curRow;
        int curCol;

        public My2DArrayIterator() {
            curRow = -1;
            curCol = -1;
            nextRow = 0;
            nextCol = 0;
            // find where to start
            while (list.size() > nextRow && list.get(nextRow).size() <= nextCol) {
                nextRow++;
            }
        }

        @Override
        public boolean hasNext() {
            if (list.size() > nextRow) {
                @SuppressWarnings("unchecked")
                List<T> curList = (List<T>) list.get(nextRow);
                if (curList.size() > nextCol)
                    return true;
            }
            return false;
        }

        @SuppressWarnings("unchecked")
        @Override
        public T next() {
            if (hasNext()) {
                List<T> nextList = (List<T>) list.get(nextRow);
                // now increment col and row if needed
                curRow = nextRow;
                curCol = nextCol;
                nextCol = nextList.size() > curCol + 1 ? curCol + 1 : 0;
                nextRow = nextList.size() > curCol + 1 ? curRow : curRow + 1;
                while (list.size() > nextRow && list.get(nextRow).size() <= nextCol) {
                    nextRow++;
                }
                return (T) list.get(curRow).get(curCol);
            } else
                throw new NoSuchElementException();
        }
        /*
            This is to move cur forward so that you can keep removing element.
        */
        public void remove() {
            if (curRow < 0 || curCol < 0)
                throw new NoSuchElementException();
            list.get(curRow).remove(curCol);
            curCol--;
            if (curRow == nextRow) {
                nextCol--;
            }
            if (curCol < 0 || list.get(curRow).size() == 0) {
                while (curRow >= 0 && list.get(curRow).size() == 0) {
                    curRow--;
                }
                curCol = curRow > 0 ? list.get(curRow).size() - 1: -1;
            }
        }
        /*
            This is like how Java ArrayList Iterator is implemented.
            you have to call next every time before you call remove.
        */
        public void remove2(){
            if (curRow < 0 || curCol < 0)
                throw new NoSuchElementException();
            list.get(curRow).remove(curCol);
            if (curRow == nextRow) nextCol--;
            curRow = -1;
            curCol = -1;
        }

    }

}

5. 一个数组，选出不相邻子序列，要求子序列和最大.
[4,9,6]=10
[4,10,3,1,5]=15

public class Solution {
    public int rob(int[] nums) {
        if( nums == null || nums.length == 0 )
            return 0;
        if( nums.length == 1 )
            return nums[0];
        int[] tmp = new int[nums.length];
        tmp[0] = nums[0];
        tmp[1] = Math.max(nums[0], nums[1]);
        for( int i = 2; i < nums.length; i++ )
            tmp[i] = Math.max(tmp[i-1], tmp[i-2] + nums[i]);
        return tmp[nums.length - 1];
    }
}

6. Water to Ocean
http://www.1point3acres.com/bbs/thread-141746-1-1.html

Iterative VS Recursive which one is better?
Recursion is usually much slower because all function calls must be stored in a stack to allow the return back to the caller functions. In many cases, memory has to be allocated and copied to implement scope isolation.

Iterative : DFS (Use Stack), BFS(Use Queue)

public class WaterToOcean {
    public static void main(String[] args) {
        char[][] map = {{'W','W','W','L','L','L','W'},
                        {'W','W','L','L','L','W','W'},
                        {'W','L','L','L','L','W','W'}};
        //findOceanRecursive(map, 0 ,6);
        findOceanIterative(map, 0 ,6);
        for (int i = 0 ; i < map.length; i++) {
            System.out.println(Arrays.toString(map[i]));
        }

    }
    public static void findOceanRecursive(char[][] map, int r, int c) {
        boolean[][] visited = new boolean[map.length][map[0].length];
        findOcean(map, visited, r, c);
    }

    private static void findOcean(char[][] map, boolean[][] visited, int r, int c) {
        if (map == null || r >= map.length || r < 0 || c < 0 || c >= map[r].length || visited[r][c] || map[r][c] != 'W') return;
        map[r][c] = 'O';
        visited[r][c] = true;
        findOcean(map, visited, r - 1, c);
        findOcean(map, visited, r + 1, c);
        findOcean(map, visited, r, c + 1);
        findOcean(map, visited, r, c - 1);
    }
    public static void findOceanIterative(char[][] map, int i, int j)  {
        if (map == null || i >= map.length || i < 0 ||j < 0 || j >= map[i].length || map[i][j] != 'W') return;
        Queue<Node> q = new LinkedList<Node>();
        boolean[][] visited = new boolean[map.length][map[0].length];
        q.add(new Node(i,j));
        while (!q.isEmpty()) {
            Node cur = q.poll();
            int r = cur.i, c = cur.j;
            map[r][c] = 'O';
            visited[r][c] = true;
            if (r + 1 < map.length && !visited[r + 1][c] && map[r + 1][c] == 'W') {
                q.add(new Node(r + 1, c));
            }
            if (r - 1 >= 0 && !visited[r - 1][c] && map[r - 1][c] == 'W') {
                q.add(new Node(r - 1, c));
            }
            if (c + 1 < map[r].length && !visited[r][c + 1] && map[r][c + 1] == 'W') {
                q.add(new Node(r, c + 1));
            }
            if (c - 1 >= 0 && !visited[r][c - 1] && map[r][c - 1] == 'W') {
                q.add(new Node(r, c - 1));
            }
        }
        
    }
    private static class Node {
        int i;
        int j;
        public Node(int i, int j) {
            this.i = i;
            this.j = j;
        }
    }
}

7.  find median from large file of integers
0,1,2,5,6,7,9

2,6,5,1,7,9,0   3
0,1,2,5 7 9 6
public int findMedian(int[] input) {
    if (input.length % 2 != 0) {
        return quickSelection(input, 0 , input.length - 1, input.length / 2);
    }
    return (quickSelection(input, 0 , input.length - 1, input.length / 2) + quickSelection(input, 0 , e, input.length / 2 - 1))/2;
}
//index from s to e, find the kth element
public int quickSelection(int[] input, int s, int e, int k) {// k is index
    if (k == 0) return input[s];
    int index = partition(input, s, e);
    if (index == k) return input[k];
    if (index < k) {
        return quickSelection(input, index + 1, e, k - index - 1);
    }
    return quickSelection(input, s , index - 1, k);
}

public int partition(int[] input, int s, int e) {//0,1,2,6,5
    int p = input[s];
    while (s < e) {
        while(s < e && input[e] >= p) {
            e--;
        }
        input[s] = input[e];
        while(s < e && input[s]<= p) {
            s++;
        }
        input[e] = input[s];
    }
    input[s] = p;
    return s;
}

8. Mini Parser
http://www.1point3acres.com/bbs/forum.php?mod=viewthread&tid=138651&extra=page%3D1%26filter%3Dsortid%26sortid%3D311%26searchoption%5B3046%5D%5Bvalue%5D%3D37%26searchoption%5B3046%5D%5Btype%5D%3Dradio%26sortid%3D311

https://leetcode.com/problems/mini-parser/

/**
 * // This is the interface that allows for creating nested lists.
 * // You should not implement it, or speculate about its implementation
 * public interface NestedInteger {
 *     // Constructor initializes an empty nested list.
 *     public NestedInteger();
 *
 *     // Constructor initializes a single integer.
 *     public NestedInteger(int value);
 *
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.
 *     public boolean isInteger();
 *
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer
 *     // Return null if this NestedInteger holds a nested list
 *     public Integer getInteger();
 *
 *     // Set this NestedInteger to hold a single integer.
 *     public void setInteger(int value);
 *
 *     // Set this NestedInteger to hold a nested list and adds a nested integer to it.
 *     public void add(NestedInteger ni);
 *
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list
 *     // Return null if this NestedInteger holds a single integer
 *     public List<NestedInteger> getList();
 * }
 */
public class Solution {
    public NestedInteger deserialize(String s) {
        if (s.charAt(0) != '[') {
            int val = Integer.parseInt(s);
            return new NestedInteger(val);
        }
        Stack<NestedInteger> stack = new Stack<NestedInteger>();
        NestedInteger ret = new NestedInteger();
        stack.push(ret);
        int i = 1;
        while (i < s.length() - 1) {
            /* 
                if current char is ] meaning the current NestedInteger is 
                complete. 
            */ 
            NestedInteger cur = null;
            if (s.charAt(i) == ',') {
                i++;
                continue;
            }
            if (s.charAt(i) == ']') {
                cur = stack.pop();
                stack.peek().add(cur);
                i++;
                continue;
            }
            /* 
                if current char is [ meaning a new NestedInteger need 
                to be added into the current NestedInteger
            */ 
            if (s.charAt(i) == '[') {
                stack.push(new NestedInteger());
                i++;
                continue;
            }
            /* 
                if current char is number, then get the entire number and 
                add this number into current NestedInteger
            */ 
            else {
                boolean neg = false;
                if (s.charAt(i) == '-') {
                    neg = true;
                    i++;
                }
                cur = stack.peek();
                int val = 0;
                while (s.charAt(i) >= '0' && s.charAt(i) <= '9') {
                    val = 10 * val + s.charAt(i) - '0';
                    i++;
                }
                val = neg ? -1 * val : val;
                cur.add(new NestedInteger(val));                
            }
            
        }
        return stack.pop();
    }
}

9. CSV Parser
如何Parse csv file:举个例子,给定一个CSV文件,格式是 “some_name|some_address|some_phone|some_job”,
要求输出Json format “{name:some_name,address:some_addres,phone:some_phone, job:some_job}”

特殊情为两个引号之间的分号,不可作为分割字符 http://itjob.io/post/349
/*
John,                   Smith,     john.smith@gmail.com,        Los Angeles,                1
Jane,                        Roberts,        janer@msn.com,                "San Francisco, CA",        0
"Alexandra ""Alex""",        Menendez,        alex.menendez@gmail.com,        Miami,                        1
"""Alexandra Alex"""
John|                        Smith |                john.smith@gmail.com |         Los Angeles |                1
Jane|                        Roberts|        janer@msn.com|                San Francisco, CA|        0
Alexandra "Alex"|        Menendez|        alex.menendez@gmail.com|        Miami|                        1
"Alexandra Alex"

deliminater: ,"abc"",""abc", = abc","abc
""
read file line by line , line
for each line:


i = first  index of ","
    while (charAt(0) == '"' && charAt(i - 1) != '"') {

    }



*/

/*
John,Smith,john.smith@gmail.com,Los Angeles,1
Jane,Roberts,janer@msn.com,"San Francisco, CA",0
"Alexandra ""Alex""",Menendez,alex.menendez@gmail.com,Miami,1
"""Alexandra Alex"""


John|Smith|john.smith@gmail.com|Los Angeles|1
Jane|Roberts|janer@msn.com|San Francisco, CA|0
Alexandra "Alex"|Menendez|alex.menendez@gmail.com|Miami|1
"Alexandra Alex"
,"AA,""AA""",
*/
public List<String> parse(List<String> list) {
    //BufferedReader file = new BufferedReader(new FileReader("path"));
    for (String s : list) {
        
        int start = 0 , end = 0;
        while (end < s.length()) {
            end = start;
            int count = 0;
            while (end < s.length()) {
                char c = s.charAt(end);
                if (c == '"') {
                    count ++;
                }
                else if (c == ',' && count % 2 == 0) {
                    break;
                }
                end ++;
            }
            if (end < s.length()){
                String cur = s.charAt(start, end);
                String processed = processQuote(cur);
                start = end ++;
            }
        }    
    }

}

private String processQuote(String s) {
    if (s.length() > 0 && s.charAt(0) == '"') {
        s.substring(1, s.length() - 1);
    }
    if (s.indexOf("/"/"") >= 0) {

    }

    
}

10. Decode
Given a method decode(testEncStr) which will return the decoded int id if testEncStr is decodeable or will throw an exception (or return null) if not, implement a new method decodeFind(String badEncStr) which takes a string and returns the decoded int id






11. 


3.给一个2d array，要求写一个顺序访问这个2d array的Iterator，包括hasNext()与next()。注意2d array的每行中元素的个数可能不一样，也可能为空。跪在这最后一面上了。
二面的时候他忘了问culture， 所以加了一面。最后跪在最后一面上了，估计是culture不fit。 求加分，求安慰




alien dictionary 和 merge intervals 但有点变化～



Onsite:
1. Text Justification 
1. Design RSS reader
2. Project
3. Coding: text justification
4. Coding:给了一堆用户，每个用户有一堆想去的城市(用整数表示的)，这些城市是按照用户的喜好程度排序的，比如
      Mary:10, 2, 5, 2
      John: 3, 10, 5, 18
      Peter: 4, 3, 8
      Kate: 3, 7, 18, 1
      要求输出所有的城市，并且保持每个用户喜欢的顺序。其实就是topological sort.
5. culture:最难忘的airbnb经历，做过什么当时觉得uncomfortable的事
6. culture:展望airbnb未来几年的发展，在工作中be a host的经历
 nested iterator, follow-up: remove function


LeetCode: stack/Maximal Rectangle-O https://leetcode.com/problems/maximal-rectangle/
/*
Given a 2D binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.

For example, given the following matrix:

1 0 1 0 0   1 0 1 0 0
1 0 1 1 1   2 0 2 1 1  
1 1 1 1 1   3 1 3 2 2  0,
1 0 0 1 0   4 0 0 3 0
Return 6.

*/
public class Solution {
    public int maximalRectangle(char[][] matrix) {
        if (matrix == null || matrix.length == 0 || matrix[0].length == 0) return 0;
        int[][] t = new int[matrix.length][matrix[0].length];
        int max = 0;
        for (int i = 0 ; i < matrix.length; i ++) {
            for (int j = 0; j < matrix[i].length; j++) {
                if (i == 0 ) {
                    t[i][j] = matrix[i][j] == '1' ? 1 : 0;
                }
                else {
                    t[i][j] = matrix[i][j] == '1' ? t[i - 1][j] + 1 : 0;
                }
                max = Math.max(max, t[i][j]);
                System.out.print(t[i][j]);
            }
            Stack<Integer> stack = new Stack<Integer>();
            for (int j = 0; j <= matrix[i].length; j++) {
                while (!stack.isEmpty() && (j == matrix[i].length || t[i][stack.peek()] >= t[i][j])) {
                    int height = t[i][stack.pop()];
                    int width = stack.isEmpty() ? j : j - stack.peek() - 1;
                    int area = height * width;
                    //System.out.print("height = " + height + " width = " + width + " area = " + area);
                    max = Math.max(max, area);
                }
                stack.push(j);
            }   
            System.out.println();
        }
        return max; 
    }

} 